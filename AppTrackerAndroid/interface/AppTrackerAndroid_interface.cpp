/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "AppTrackerAndroid.h"


// Define S3E_EXT_SKIP_LOADER_CALL_LOCK on the user-side to skip LoaderCallStart/LoaderCallDone()-entry.
// e.g. in s3eNUI this is used for generic user-side IwUI-based implementation.
#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
#if defined I3D_ARCH_MIPS || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)) || defined I3D_ARCH_NACLX86_64
// For platforms missing stack-switching (MIPS, WP8, Android-x86, NaCl, etc.) make loader-entry via LoaderCallStart/LoaderCallDone() on the user-side.
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*AppTrackerAndroidRegister_t)(AppTrackerAndroidCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*AppTrackerAndroidUnRegister_t)(AppTrackerAndroidCallback cbid, s3eCallback fn);
typedef  s3eResult(*startSession_t)(const char* api_key);
typedef  s3eResult(*closeSession_t)();
typedef  s3eResult(*pause_t)();
typedef  s3eResult(*resume_t)();
typedef  s3eResult(*event_t)(const char* event_name);
typedef  s3eResult(*eventWithValue_t)(const char* event_name, int event_value);
typedef  s3eResult(*loadModule_t)(const char* location_code, const char* userData);
typedef  s3eResult(*loadModuleToCache_t)(const char* location_code, const char* userData);
typedef  s3eResult(*destroyModule_t)();
typedef  s3eResult(*fixAdOrientation_t)(int landscape_portrait_or_auto);

/**
 * struct that gets filled in by AppTrackerAndroidRegister
 */
typedef struct AppTrackerAndroidFuncs
{
    AppTrackerAndroidRegister_t m_AppTrackerAndroidRegister;
    AppTrackerAndroidUnRegister_t m_AppTrackerAndroidUnRegister;
    startSession_t m_startSession;
    closeSession_t m_closeSession;
    pause_t m_pause;
    resume_t m_resume;
    event_t m_event;
    eventWithValue_t m_eventWithValue;
    loadModule_t m_loadModule;
    loadModuleToCache_t m_loadModuleToCache;
    destroyModule_t m_destroyModule;
    fixAdOrientation_t m_fixAdOrientation;
} AppTrackerAndroidFuncs;

static AppTrackerAndroidFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x4055eb93, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: AppTrackerAndroid");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x4055eb93, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool AppTrackerAndroidAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult AppTrackerAndroidRegister(AppTrackerAndroidCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[0] func: AppTrackerAndroidRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_AppTrackerAndroidRegister);
#endif

    s3eResult ret = g_Ext.m_AppTrackerAndroidRegister(cbid, fn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_AppTrackerAndroidRegister);
#endif

    return ret;
}

s3eResult AppTrackerAndroidUnRegister(AppTrackerAndroidCallback cbid, s3eCallback fn)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[1] func: AppTrackerAndroidUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_AppTrackerAndroidUnRegister);
#endif

    s3eResult ret = g_Ext.m_AppTrackerAndroidUnRegister(cbid, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_AppTrackerAndroidUnRegister);
#endif

    return ret;
}

s3eResult startSession(const char* api_key)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[2] func: startSession"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_startSession);
#endif

    s3eResult ret = g_Ext.m_startSession(api_key);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_startSession);
#endif

    return ret;
}

s3eResult closeSession()
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[3] func: closeSession"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_closeSession);
#endif

    s3eResult ret = g_Ext.m_closeSession();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_closeSession);
#endif

    return ret;
}

s3eResult pause()
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[4] func: pause"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_pause);
#endif

    s3eResult ret = g_Ext.m_pause();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_pause);
#endif

    return ret;
}

s3eResult resume()
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[5] func: resume"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_resume);
#endif

    s3eResult ret = g_Ext.m_resume();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_resume);
#endif

    return ret;
}

s3eResult event(const char* event_name)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[6] func: event"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_event);
#endif

    s3eResult ret = g_Ext.m_event(event_name);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_event);
#endif

    return ret;
}

s3eResult eventWithValue(const char* event_name, int event_value)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[7] func: eventWithValue"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_eventWithValue);
#endif

    s3eResult ret = g_Ext.m_eventWithValue(event_name, event_value);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_eventWithValue);
#endif

    return ret;
}

s3eResult loadModule(const char* location_code, const char* userData)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[8] func: loadModule"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_loadModule);
#endif

    s3eResult ret = g_Ext.m_loadModule(location_code, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_loadModule);
#endif

    return ret;
}

s3eResult loadModuleToCache(const char* location_code, const char* userData)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[9] func: loadModuleToCache"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_loadModuleToCache);
#endif

    s3eResult ret = g_Ext.m_loadModuleToCache(location_code, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_loadModuleToCache);
#endif

    return ret;
}

s3eResult destroyModule()
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[10] func: destroyModule"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_destroyModule);
#endif

    s3eResult ret = g_Ext.m_destroyModule();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_destroyModule);
#endif

    return ret;
}

s3eResult fixAdOrientation(int landscape_portrait_or_auto)
{
    IwTrace(APPTRACKERANDROID_VERBOSE, ("calling AppTrackerAndroid[11] func: fixAdOrientation"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, (void*)g_Ext.m_fixAdOrientation);
#endif

    s3eResult ret = g_Ext.m_fixAdOrientation(landscape_portrait_or_auto);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, (void*)g_Ext.m_fixAdOrientation);
#endif

    return ret;
}
