/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_APPTRACKERANDROID_H
#define S3E_EXT_APPTRACKERANDROID_H

#include <s3eTypes.h>

enum AppTrackerAndroidCallback {
	APPTRACKERANDROID_MODULELOADED,
	APPTRACKERANDROID_MODULEFAILED,
	APPTRACKERANDROID_MODULECLOSED,
	APPTRACKERANDROID_MODULECACHED,
	APPTRACKERANDROID_MODULECLICKED,
	APPTRACKERANDROID_MEDIAFINISHED,
	APPTRACKERANDROID_CALLBACK_MAX
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the AppTrackerAndroid extension is available.
 */
s3eBool AppTrackerAndroidAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref AppTrackerAndroidCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *
 * @see AppTrackerAndroidUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref AppTrackerAndroidCallback enum.
 */
s3eResult AppTrackerAndroidRegister(AppTrackerAndroidCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback to unregister.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the AppTrackerAndroidCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see AppTrackerAndroidRegister
 */
s3eResult AppTrackerAndroidUnRegister(AppTrackerAndroidCallback cbid, s3eCallback fn);

s3eResult startSession(const char* api_key);

s3eResult closeSession();

s3eResult pause();

s3eResult resume();

s3eResult event(const char* event_name);

s3eResult eventWithValue(const char* event_name, int event_value);

s3eResult loadModule(const char* location_code,const char* userData);

s3eResult loadModuleToCache(const char* location_code,const char* userData);

s3eResult destroyModule();

s3eResult fixAdOrientation(int landscape_portrait_or_auto);

// \cond HIDDEN_DEFINES
S3E_END_C_DECL
// \endcond

#endif /* !S3E_EXT_APPTRACKERANDROID_H */
