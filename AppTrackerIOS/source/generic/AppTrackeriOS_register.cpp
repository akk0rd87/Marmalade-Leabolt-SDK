/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "AppTrackeriOS_autodefs.h"
#include "s3eEdk.h"
#include "AppTrackeriOS.h"
//Declarations of Init and Term functions
extern s3eResult AppTrackeriOSInit();
extern void AppTrackeriOSTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult AppTrackeriOS_startSession_wrap(const char* apiKey)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_startSession"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_startSession, 1, apiKey);
}

static s3eResult AppTrackeriOS_closeSession_wrap()
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_closeSession"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_closeSession, 0);
}

static s3eResult AppTrackeriOS_event_wrap(const char* eventName)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_event"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_event, 1, eventName);
}

static s3eResult AppTrackeriOS_eventWithValue_wrap(const char* eventName, const char* valueString)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_eventWithValue"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_eventWithValue, 2, eventName, valueString);
}

static s3eResult AppTrackeriOS_loadModule_wrap(const char* location)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_loadModule"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_loadModule, 1, location);
}

static s3eResult AppTrackeriOS_loadModuleToCache_wrap(const char* location_code)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_loadModuleToCache"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_loadModuleToCache, 1, location_code);
}

static s3eResult AppTrackeriOS_destroyModule_wrap()
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_destroyModule"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_destroyModule, 0);
}

static s3eResult AppTrackeriOS_fixAdOrientation_wrap(int landscape_portrait_or_auto)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_fixAdOrientation"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_fixAdOrientation, 1, landscape_portrait_or_auto);
}

static s3eResult AppTrackeriOS_setAgeRange_wrap(const char* ageRange)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_setAgeRange"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_setAgeRange, 1, ageRange);
}

static s3eResult AppTrackeriOS_setGender_wrap(const char* gender)
{
    IwTrace(APPTRACKERIOS_VERBOSE, ("calling AppTrackeriOS func on main thread: AppTrackeriOS_setGender"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)AppTrackeriOS_setGender, 1, gender);
}

#define AppTrackeriOS_startSession AppTrackeriOS_startSession_wrap

#define AppTrackeriOS_closeSession AppTrackeriOS_closeSession_wrap

#define AppTrackeriOS_event AppTrackeriOS_event_wrap

#define AppTrackeriOS_eventWithValue AppTrackeriOS_eventWithValue_wrap

#define AppTrackeriOS_loadModule AppTrackeriOS_loadModule_wrap

#define AppTrackeriOS_loadModuleToCache AppTrackeriOS_loadModuleToCache_wrap

#define AppTrackeriOS_destroyModule AppTrackeriOS_destroyModule_wrap

#define AppTrackeriOS_fixAdOrientation AppTrackeriOS_fixAdOrientation_wrap

#define AppTrackeriOS_setAgeRange AppTrackeriOS_setAgeRange_wrap

#define AppTrackeriOS_setGender AppTrackeriOS_setGender_wrap


#endif

s3eResult AppTrackeriOSRegister(AppTrackeriOSCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_APPTRACKERIOS_HASH, APPTRACKERIOS_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult AppTrackeriOSUnRegister(AppTrackeriOSCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_APPTRACKERIOS_HASH, APPTRACKERIOS_CALLBACK_MAX, cbid, fn);
}

void AppTrackeriOSRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[13];
    funcPtrs[0] = (void*)AppTrackeriOSRegister;
    funcPtrs[1] = (void*)AppTrackeriOSUnRegister;
    funcPtrs[2] = (void*)AppTrackeriOS_startSession;
    funcPtrs[3] = (void*)AppTrackeriOS_closeSession;
    funcPtrs[4] = (void*)AppTrackeriOS_event;
    funcPtrs[5] = (void*)AppTrackeriOS_eventWithValue;
    funcPtrs[6] = (void*)AppTrackeriOS_loadModule;
    funcPtrs[7] = (void*)AppTrackeriOS_loadModuleToCache;
    funcPtrs[8] = (void*)AppTrackeriOS_destroyModule;
    funcPtrs[9] = (void*)AppTrackeriOS_fixAdOrientation;
    funcPtrs[10] = (void*)AppTrackeriOS_setAgeRange;
    funcPtrs[11] = (void*)AppTrackeriOS_setGender;
    funcPtrs[12] = (void*)AppTrackeriOS_isAdReady;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[13] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("AppTrackeriOS", funcPtrs, sizeof(funcPtrs), flags, AppTrackeriOSInit, AppTrackeriOSTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int AppTrackeriOSStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&AppTrackeriOSRegisterExt;
    return 0;
}

int g_AppTrackeriOSVal = AppTrackeriOSStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    AppTrackeriOSRegisterExt();
}
#endif

#endif
